initialize_folder_task:
  description: |
    Use the ProjectInitTool to install necessary tools and clone the template project.
  expected_output: >
    {
      "project_path": "<absolute path to cloned folder>",
      "success": true or false,
      "errors": []
    }
  agent: folder_initializer


planning_task:
  description: >
    Take the user's input `{goal}` and produce:
      - An array `agents` of agent names & roles
      - An array `tasks` mapping each agent to their responsibilities
  expected_output: >
    After deciding what agents and tasks are needed, return all the functionality in the syntax: {syntax}
    where project_name is {project_name} and wrap each file in a ```file:<relative/path>``` code block exactly like this:

    ```file:src/{project_name}/main.py
    #!/usr/bin/env python
    import sys
    ...
    ```
    ```file:src/{project_name}/crew.py
    from crewai import Agent, Crew, Process, Task
    ...
    ```
    ```file:src/{project_name}/__init__.py
    #keep empty
    ```
    ```file:src/{project_name}/config/agents.yaml
    planner:
      role: Goal Planner Agent
      ...
    ```
    ```file:src/{project_name}/config/tasks.yaml
    planning_task:
      description: ...
      ...
    ```
  agent: planner


write_files_task:
  description: >
    Use the FileWriteTool to extract and materialize all `file:<path>` blocks from
    planner output (available as input) into actual project files.
    Use the project_path output by initialize_folder_task as base_dir
  expected_output: >
    JSON manifest:
      - created_files: list of paths written
      - errors: list of any errors encountered
  agent: file_creator
  context:
    - initialize_folder_task

packaging_task:
  description: >-
    Receive `project_path` and zip it into `{project_name}.zip` in `{base_dir}` - default `.`.
    Use ZipTool with same input. Return:
      {
        "zip_path": "...path/to/{project_name}.zip",
        "created_files": ["...zip..."],
        "errors": []
      }
  expected_output: >-
    JSON manifest including `zip_path`, `created_files`, and any `errors`.
  agent: packager
  context:
    - initialize_folder_task
    - write_files_task